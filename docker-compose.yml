# Docker Compose configuration for AidlY platform

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aidly-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: aidly
      POSTGRES_USER: aidly_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-aidly_secret_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - aidly-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aidly_user -d aidly"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aidly-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secret_2024}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - aidly-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: aidly-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-aidly_admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq_secret_2024}
      RABBITMQ_DEFAULT_VHOST: aidly
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"      # AMQP port
      - "${RABBITMQ_MGMT_PORT:-15672}:15672" # Management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - aidly-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: aidly-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-aidly_minio_admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio_secret_2024}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS:-aidly-attachments:public,aidly-avatars:public,aidly-exports:private}
    ports:
      - "${MINIO_PORT:-9000}:9000"     # API port
      - "${MINIO_CONSOLE_PORT:-9001}:9001" # Console UI
    volumes:
      - minio-data:/data
    networks:
      - aidly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway (Kong)
  kong-database:
    image: postgres:15-alpine
    container_name: aidly-kong-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${KONG_DB_PASSWORD:-kong_secret_2024}
    volumes:
      - kong-db-data:/var/lib/postgresql/data
    networks:
      - aidly-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migration:
    image: kong:latest
    container_name: aidly-kong-migration
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kong_secret_2024}
    networks:
      - aidly-network
    restart: on-failure

  kong:
    image: kong:latest
    container_name: aidly-kong
    restart: unless-stopped
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kong_secret_2024}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "${KONG_PROXY_PORT:-8000}:8000"     # Proxy port
      - "${KONG_PROXY_SSL_PORT:-8443}:8443" # Proxy SSL port
      - "${KONG_ADMIN_PORT:-8001}:8001"     # Admin API
      - "${KONG_ADMIN_SSL_PORT:-8444}:8444" # Admin API SSL
    volumes:
      - ./docker/kong:/opt/kong
    networks:
      - aidly-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Email Service (Lumen with IMAP/SMTP)
  email-service:
    build:
      context: ./services/email-service
      dockerfile: Dockerfile
    container_name: aidly-email-service
    restart: unless-stopped
    environment:
      APP_NAME: AidlY-Email-Service
      APP_ENV: development
      APP_DEBUG: true
      APP_URL: http://localhost:8005
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: aidly
      DB_USERNAME: aidly_user
      DB_PASSWORD: ${DB_PASSWORD:-aidly_secret_2024}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secret_2024}
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-aidly_admin}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_secret_2024}
      RABBITMQ_VHOST: aidly
      TICKET_SERVICE_URL: http://ticket-service:8002
      CLIENT_SERVICE_URL: http://client-service:8003
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-aidly_minio_admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio_secret_2024}
      MINIO_BUCKET: aidly-attachments
    ports:
      - "8005:8005"
    volumes:
      - ./services/email-service:/var/www/html
      - ./services/email-service/storage/logs:/var/www/html/storage/logs
    networks:
      - aidly-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Auth Service (Lumen with JWT authentication)
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: aidly-auth-service
    restart: unless-stopped
    environment:
      APP_NAME: AidlY-Auth-Service
      APP_ENV: development
      APP_DEBUG: true
      APP_URL: http://localhost:8001
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: aidly
      DB_USERNAME: aidly_user
      DB_PASSWORD: ${DB_PASSWORD:-aidly_secret_2024}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secret_2024}
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-key-here-change-in-production}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-aidly_admin}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_secret_2024}
      RABBITMQ_VHOST: aidly
    ports:
      - "8001:8001"
    volumes:
      - ./services/auth-service:/var/www/html
      - ./services/auth-service/storage/logs:/var/www/html/storage/logs
    networks:
      - aidly-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Client Service (Lumen for client management)
  client-service:
    build:
      context: ./services/client-service
      dockerfile: Dockerfile
    container_name: aidly-client-service
    restart: unless-stopped
    environment:
      APP_NAME: AidlY-Client-Service
      APP_ENV: development
      APP_DEBUG: true
      APP_URL: http://localhost:8003
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: aidly
      DB_USERNAME: aidly_user
      DB_PASSWORD: ${DB_PASSWORD:-aidly_secret_2024}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secret_2024}
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-aidly_admin}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_secret_2024}
      RABBITMQ_VHOST: aidly
      AUTH_SERVICE_URL: http://auth-service:8001
      TICKET_SERVICE_URL: http://ticket-service:8002
    ports:
      - "8003:8003"
    volumes:
      - ./services/client-service:/var/www/html
      - ./services/client-service/storage/logs:/var/www/html/storage/logs
    networks:
      - aidly-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Ticket Service (Lumen for ticket management)
  ticket-service:
    build:
      context: ./services/ticket-service
      dockerfile: Dockerfile
    container_name: aidly-ticket-service
    restart: unless-stopped
    environment:
      APP_NAME: AidlY-Ticket-Service
      APP_ENV: development
      APP_DEBUG: true
      APP_URL: http://localhost:8002
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: aidly
      DB_USERNAME: aidly_user
      DB_PASSWORD: ${DB_PASSWORD:-aidly_secret_2024}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secret_2024}
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-aidly_admin}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_secret_2024}
      RABBITMQ_VHOST: aidly
      AUTH_SERVICE_URL: http://auth-service:8001
      CLIENT_SERVICE_URL: http://client-service:8003
      EMAIL_SERVICE_URL: http://email-service:8005
    ports:
      - "8002:8002"
    volumes:
      - ./services/ticket-service:/var/www/html
      - ./services/ticket-service/storage/logs:/var/www/html/storage/logs
    networks:
      - aidly-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Notification Service (Multi-channel notifications)
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: aidly-notification-service
    restart: unless-stopped
    environment:
      APP_NAME: AidlY-Notification-Service
      APP_ENV: development
      APP_DEBUG: true
      APP_URL: http://localhost:8004
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: aidly
      DB_USERNAME: aidly_user
      DB_PASSWORD: ${DB_PASSWORD:-aidly_secret_2024}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secret_2024}
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-aidly_admin}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_secret_2024}
      RABBITMQ_VHOST: aidly
      # Email settings
      MAIL_MAILER: smtp
      MAIL_HOST: ${MAIL_HOST:-smtp.mailtrap.io}
      MAIL_PORT: ${MAIL_PORT:-2525}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_ENCRYPTION: tls
      # Slack settings
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
      SLACK_CHANNEL: ${SLACK_CHANNEL:-#support}
      # SMS settings
      SMS_PROVIDER: ${SMS_PROVIDER:-twilio}
      TWILIO_SID: ${TWILIO_SID}
      TWILIO_TOKEN: ${TWILIO_TOKEN}
      TWILIO_FROM: ${TWILIO_FROM}
    ports:
      - "8004:8004"
    volumes:
      - ./services/notification-service:/var/www/html
      - ./services/notification-service/storage/logs:/var/www/html/storage/logs
    networks:
      - aidly-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI Integration Service (Webhook-ready AI processing)
  ai-integration-service:
    build:
      context: ./services/ai-integration-service
      dockerfile: Dockerfile
    container_name: aidly-ai-service
    restart: unless-stopped
    environment:
      APP_NAME: AidlY-AI-Integration-Service
      APP_ENV: development
      APP_DEBUG: true
      APP_URL: http://localhost:8006
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: aidly
      DB_USERNAME: aidly_user
      DB_PASSWORD: ${DB_PASSWORD:-aidly_secret_2024}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secret_2024}
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-aidly_admin}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_secret_2024}
      RABBITMQ_VHOST: aidly
      # AI Provider Settings
      AI_DEFAULT_PROVIDER: ${AI_DEFAULT_PROVIDER:-openai}
      OPENAI_ENABLED: ${OPENAI_ENABLED:-false}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_ENABLED: ${ANTHROPIC_ENABLED:-false}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GEMINI_ENABLED: ${GEMINI_ENABLED:-false}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      # Webhook Settings
      WEBHOOK_SIGNING_SECRET: ${WEBHOOK_SIGNING_SECRET:-your-webhook-secret}
      # Feature Flags
      AI_FEATURE_AUTO_CATEGORIZATION: ${AI_FEATURE_AUTO_CATEGORIZATION:-false}
      AI_FEATURE_AUTO_PRIORITIZATION: ${AI_FEATURE_AUTO_PRIORITIZATION:-false}
      AI_FEATURE_RESPONSE_SUGGESTIONS: ${AI_FEATURE_RESPONSE_SUGGESTIONS:-false}
      AI_FEATURE_SENTIMENT_ANALYSIS: ${AI_FEATURE_SENTIMENT_ANALYSIS:-false}
    ports:
      - "8006:8006"
    volumes:
      - ./services/ai-integration-service:/var/www/html
      - ./services/ai-integration-service/storage/logs:/var/www/html/storage/logs
    networks:
      - aidly-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Analytics Service (Advanced reporting and analytics)
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    container_name: aidly-analytics-service
    restart: unless-stopped
    environment:
      APP_NAME: AidlY-Analytics-Service
      APP_ENV: development
      APP_DEBUG: true
      APP_URL: http://localhost:8007
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: aidly
      DB_USERNAME: aidly_user
      DB_PASSWORD: ${DB_PASSWORD:-aidly_secret_2024}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secret_2024}
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-aidly_admin}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_secret_2024}
      RABBITMQ_VHOST: aidly
      # Service URLs for cross-service communication
      AUTH_SERVICE_URL: http://auth-service:8001
      TICKET_SERVICE_URL: http://ticket-service:8002
      CLIENT_SERVICE_URL: http://client-service:8003
      NOTIFICATION_SERVICE_URL: http://notification-service:8004
      EMAIL_SERVICE_URL: http://email-service:8005
      # Analytics specific settings
      ANALYTICS_CACHE_TTL: 300
      ANALYTICS_AGGREGATION_SCHEDULE: "0 */6 * * *"
      ANALYTICS_EXPORT_PATH: /var/www/html/storage/exports
      ANALYTICS_MAX_EXPORT_RECORDS: 10000
      # Report scheduling
      REPORT_SCHEDULE_ENABLED: true
      REPORT_RETENTION_DAYS: 90
      # Performance settings
      ANALYTICS_QUERY_TIMEOUT: 30
      ANALYTICS_BATCH_SIZE: 1000
    ports:
      - "8007:8007"
    volumes:
      - ./services/analytics-service:/var/www/html
      - ./services/analytics-service/storage/logs:/var/www/html/storage/logs
      - analytics-exports:/var/www/html/storage/exports
    networks:
      - aidly-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx (Alternative to Kong - commented out by default)
  # nginx:
  #   image: nginx:alpine
  #   container_name: aidly-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
  #     - ./docker/nginx/ssl:/etc/nginx/ssl:ro
  #   networks:
  #     - aidly-network
  #   depends_on:
  #     - auth-service
  #     - ticket-service
  #     - client-service

  # Elasticsearch (for future search functionality)
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
  #   container_name: aidly-elasticsearch
  #   restart: unless-stopped
  #   environment:
  #     - discovery.type=single-node
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - xpack.security.enabled=false
  #   ports:
  #     - "${ELASTIC_PORT:-9200}:9200"
  #   volumes:
  #     - elasticsearch-data:/usr/share/elasticsearch/data
  #   networks:
  #     - aidly-network

networks:
  aidly-network:
    driver: bridge
    name: aidly-network

volumes:
  postgres-data:
    driver: local
    name: aidly-postgres-data
  redis-data:
    driver: local
    name: aidly-redis-data
  rabbitmq-data:
    driver: local
    name: aidly-rabbitmq-data
  minio-data:
    driver: local
    name: aidly-minio-data
  kong-db-data:
    driver: local
    name: aidly-kong-db-data
  analytics-exports:
    driver: local
    name: aidly-analytics-exports
  # elasticsearch-data:
  #   driver: local
  #   name: aidly-elasticsearch-data