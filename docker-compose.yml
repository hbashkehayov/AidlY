version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aidly-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: aidly
      POSTGRES_USER: aidly_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-aidly_secret_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - aidly-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aidly_user -d aidly"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aidly-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secret_2024}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - aidly-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: aidly-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-aidly_admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq_secret_2024}
      RABBITMQ_DEFAULT_VHOST: aidly
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"      # AMQP port
      - "${RABBITMQ_MGMT_PORT:-15672}:15672" # Management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - aidly-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: aidly-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-aidly_minio_admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio_secret_2024}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS:-aidly-attachments:public,aidly-avatars:public,aidly-exports:private}
    ports:
      - "${MINIO_PORT:-9000}:9000"     # API port
      - "${MINIO_CONSOLE_PORT:-9001}:9001" # Console UI
    volumes:
      - minio-data:/data
    networks:
      - aidly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway (Kong)
  kong-database:
    image: postgres:15-alpine
    container_name: aidly-kong-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${KONG_DB_PASSWORD:-kong_secret_2024}
    volumes:
      - kong-db-data:/var/lib/postgresql/data
    networks:
      - aidly-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migration:
    image: kong:3.4-alpine
    container_name: aidly-kong-migration
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kong_secret_2024}
    networks:
      - aidly-network
    restart: on-failure

  kong:
    image: kong:3.4-alpine
    container_name: aidly-kong
    restart: unless-stopped
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kong_secret_2024}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_DECLARATIVE_CONFIG: /opt/kong/kong.yml
    ports:
      - "${KONG_PROXY_PORT:-8000}:8000"     # Proxy port
      - "${KONG_PROXY_SSL_PORT:-8443}:8443" # Proxy SSL port
      - "${KONG_ADMIN_PORT:-8001}:8001"     # Admin API
      - "${KONG_ADMIN_SSL_PORT:-8444}:8444" # Admin API SSL
    volumes:
      - ./docker/kong:/opt/kong
    networks:
      - aidly-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Nginx (Alternative to Kong - commented out by default)
  # nginx:
  #   image: nginx:alpine
  #   container_name: aidly-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
  #     - ./docker/nginx/ssl:/etc/nginx/ssl:ro
  #   networks:
  #     - aidly-network
  #   depends_on:
  #     - auth-service
  #     - ticket-service
  #     - client-service

  # Elasticsearch (for future search functionality)
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
  #   container_name: aidly-elasticsearch
  #   restart: unless-stopped
  #   environment:
  #     - discovery.type=single-node
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - xpack.security.enabled=false
  #   ports:
  #     - "${ELASTIC_PORT:-9200}:9200"
  #   volumes:
  #     - elasticsearch-data:/usr/share/elasticsearch/data
  #   networks:
  #     - aidly-network

networks:
  aidly-network:
    driver: bridge
    name: aidly-network

volumes:
  postgres-data:
    driver: local
    name: aidly-postgres-data
  redis-data:
    driver: local
    name: aidly-redis-data
  rabbitmq-data:
    driver: local
    name: aidly-rabbitmq-data
  minio-data:
    driver: local
    name: aidly-minio-data
  kong-db-data:
    driver: local
    name: aidly-kong-db-data
  # elasticsearch-data:
  #   driver: local
  #   name: aidly-elasticsearch-data